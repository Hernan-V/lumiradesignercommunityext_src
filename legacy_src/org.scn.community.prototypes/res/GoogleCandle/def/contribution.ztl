
/**
 * Generated ZTL Class for GoogleCandle
 * 
 * DO NOT EDIT, ROOT SOURCE for custom functions in /spec/contribution.ztl
 */
class org.scn.community.prototypes.GoogleCandle extends org.scn.community.shared.Component {

	/** Adds a root element containing key [String], text [String], start1 [float], start2 [float], end1 [float], end2 [float].

 	<example>
	You want to add 2 root elements
	<code>
	GOOGLECANDLE.addCandle(key [String], text [String], start1 [float], start2 [float], end1 [float], end2 [float]);<br>
	GOOGLECANDLE.addCandle(key [String], text [String], start1 [float], start2 [float], end1 [float], end2 [float]);<br>
	<br>
	</code>
	</example>
	 */
	void addCandle (
			/**Unique key of the candle*/String key, 
			/**Text of the candle*/String text, 
			/**Start 1 value*/float start1, 
			/**Start 2 value*/float start2, 
			/**End 1 value*/float end1, 
			/**End 2 value*/float end2
			) {*

		
		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			start1:start1, 
			start2:start2, 
			end1:end1, 
			end2:end2
			};

		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			this.candles = "[]";
		}

		var elementsJson = JSON.parse(this.candles);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				alreadyFound = true;
				break;
			}
		}

		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/** Removes a root element by key.

 	<example>
	You want to remove root element
	<code>
	GOOGLECANDLE.removeCandle(String key);<br>
	<br>
	</code>
	</example>
	 */
	void removeCandle (
			String key
			) {*

		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			this.candles = "[]";
		}

		var elementsJson = JSON.parse(this.candles);

		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson.splice(i,1);
				break;
			}
		}

		// remove all items with this parent
		for (var i = elementsJson.length - 1; i >= 0; i--){
			if (elementsJson[i].parentKey == key) {
				elementsJson.splice(i,1);
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}

	/** Insert a root element by index.

 	<example>
	You want to insert a root element
	<code>
	GOOGLECANDLE.insertCandle(index [int], key [String], text [String], start1 [float], start2 [float], end1 [float], end2 [float]);<br>
	<br>
	</code>
	</example>
	 */
	void insertCandle (
			/**Index to Insert (0-based)*/int insertionIndex0based,
			/**Unique key of the candle*/String key, 
			/**Text of the candle*/String text, 
			/**Start 1 value*/float start1, 
			/**Start 2 value*/float start2, 
			/**End 1 value*/float end1, 
			/**End 2 value*/float end2
			) {*

		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			this.candles = "[]";
		}
		
		var elementsJson = JSON.parse(this.candles);
		var newElementsJson = [];

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			start1:start1, 
			start2:start2, 
			end1:end1, 
			end2:end2
		};

		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				newElementsJson.push(itemDef);
			}

			newElementsJson.push(elementsJson[i]);
		}

		this.candles = JSON.stringify(newElementsJson);
	*}

	/**
	 * Updates given Candle<br/>
	 */
	void updateCandle (
			/**Unique key of the candle*/String key, 
			/**Text of the candle*/String text, 
			/**Start 1 value*/float start1, 
			/**Start 2 value*/float start2, 
			/**End 1 value*/float end1, 
			/**End 2 value*/float end2
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			this.candles = "[]";
		}

		var itemDef = {
			leaf:true,
			key:key, 
			text:text, 
			start1:start1, 
			start2:start2, 
			end1:end1, 
			end2:end2
		};

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i] = itemDef;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Returns Key at given Index<br/>
	 */
	String getCandleAtIndex (
			/**Index to pick the key*/ int index0based
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			this.candles = "[]";
		}

		var elementsJson = JSON.parse(this.candles);

		for (var i = 0; i < elementsJson.length ; i++){
			if (index0based == i) {
				return elementsJson[i].key;
			}
		}

		return "";
	*}

	/**
	 * Gets Candles As JSON String
	 */	
	String getCandlesAsJSON() {*
		var jsonObject = JSON.parse(this.candles);
		return JSON.stringify(jsonObject, null, 4);
	*}

	/**
	 * Cleans All Candles
	 */	
	String cleanAllCandles() {*
		this.candles = "[]";
	*}
	
	/**
	 * Sets the Text for Candle keys<br/>
	 */
	void setCandleTexts (
			/**/ String keys,
			/**/ String separator,
	        /* Text */ String text
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.candles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].text = text;
					break;
				}
			}
		}
		
		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Text for Candle Key<br/>
	 */
	void setCandleText (
			/**/ String key,
			/**/ String text
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].text = text;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Text for Candle Key<br/>
	 */
	String getCandleText (
			/**/ String key
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		var value = "";
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].text;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Start1 for Candle keys<br/>
	 */
	void setCandleStart1s (
			/**/ String keys,
			/**/ String separator,
	        /* Start1 */ float start1
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.candles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].start1 = start1;
					break;
				}
			}
		}
		
		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Start1 for Candle Key<br/>
	 */
	void setCandleStart1 (
			/**/ String key,
			/**/ float start1
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].start1 = start1;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Start1 for Candle Key<br/>
	 */
	float getCandleStart1 (
			/**/ String key
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].start1;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the Start2 for Candle keys<br/>
	 */
	void setCandleStart2s (
			/**/ String keys,
			/**/ String separator,
	        /* Start2 */ float start2
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.candles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].start2 = start2;
					break;
				}
			}
		}
		
		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the Start2 for Candle Key<br/>
	 */
	void setCandleStart2 (
			/**/ String key,
			/**/ float start2
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].start2 = start2;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of Start2 for Candle Key<br/>
	 */
	float getCandleStart2 (
			/**/ String key
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].start2;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the End1 for Candle keys<br/>
	 */
	void setCandleEnd1s (
			/**/ String keys,
			/**/ String separator,
	        /* End1 */ float end1
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.candles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].end1 = end1;
					break;
				}
			}
		}
		
		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the End1 for Candle Key<br/>
	 */
	void setCandleEnd1 (
			/**/ String key,
			/**/ float end1
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].end1 = end1;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of End1 for Candle Key<br/>
	 */
	float getCandleEnd1 (
			/**/ String key
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].end1;
				break;
			}
		}
		
		return value;
	*}
	/**
	 * Sets the End2 for Candle keys<br/>
	 */
	void setCandleEnd2s (
			/**/ String keys,
			/**/ String separator,
	        /* End2 */ float end2
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}
	
		var changeKeys = keys.split(separator);	

		var elementsJson = JSON.parse(this.candles);

		// loop and find and change
		for (var i = 0; i < elementsJson.length ; i++){
			for (var j = 0; j < changeKeys.length ; j++){
				if (elementsJson[i].key == changeKeys[j]) {
					elementsJson[i].end2 = end2;
					break;
				}
			}
		}
		
		this.candles = JSON.stringify(elementsJson);
	*}

	/**
	 * Sets the End2 for Candle Key<br/>
	 */
	void setCandleEnd2 (
			/**/ String key,
			/**/ float end2
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				elementsJson[i].end2 = end2;
				break;
			}
		}

		this.candles = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Returns value of End2 for Candle Key<br/>
	 */
	float getCandleEnd2 (
			/**/ String key
			) 
	{*
		if (this.candles === undefined || this.candles === "" || this.candles === "<delete>"){
			return;
		}

		var elementsJson = JSON.parse(this.candles);

		var value = undefined;
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == key) {
				value = elementsJson[i].end2;
				break;
			}
		}
		
		return value;
	*}




	/* START HERE PLACE FOR CUSTOM ZTL FUNCTIONS */
	// here is the place for other custom functions
}
