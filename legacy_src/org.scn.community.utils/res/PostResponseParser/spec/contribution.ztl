	/** Adds payload to HTTP requests. Typically used with POST requests as GET
	 * uses the URL query string.

 	<example>
	You want to add JSON data to your POST request to be send to the server
	<code>
	addPayloadToHttp("{"key":"value"}");<br>
	<br>
	</code>
	</example>
	 */
	void addPayloadToHttp(String data){*
		this.DPayload = data;
	*}

	/**
	 * Trigger Execution of the given URL and parameter list
	 */
	void triggerExecution () {*
		this.DTrigger = "GO";
	*}

	/**
	 * Remove All Parameters from the Array.
	 */	
	void cleanAllParameters (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DParameters = JSON.stringify(elementsArray);
	*}

	/**
	 * Remove All Headers from the Array.
	 */	
	void cleanAllHeaders (){*
		this.DCleanAll = true;

		var elementsArray = [];
		this.DHeaders = JSON.stringify(elementsArray);
	*}
	
	/**
	Returns the content of property Return Parameters as loopable name/value array.
	<example>
	You want to loop at values:
	<code>
	var content = POSTRESPONSEPARSER.getReturnParametersAsNameValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.name, element.value);<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul>
		<li>key: k1; value: v1</li>
		<li>key: k2; value: v2</li>
		<li>key: k3; value: v3</li></ul>
	</example>
	*/
	org.scn.community.shared.NameValueArray getReturnParametersAsNameValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.DReturnParameters;  
		var a = []; 
		if(s!="") a = JSON.parse(s);
		
		var tempA = [];
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > a.length) {
			maxMembers = a.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"name": a[i].name, 
				"value": a[i].value
			};
			
			tempA.push(itemDef);
		}
		
		return tempA;
	*}

	/**
	Returns the content of property Return Headers as loopable name/value array.
	<example>
	You want to loop at values:
	<code>
	var content = POSTRESPONSEPARSER.getReturnHeadersAsNameValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.name, element.value);<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul>
		<li>key: k1; value: v1</li>
		<li>key: k2; value: v2</li>
		<li>key: k3; value: v3</li></ul>
	</example>
	*/
	org.scn.community.shared.NameValueArray getReturnHeadersAsNameValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.DReturnHeaders;  
		var a = []; 
		if(s!="") a = JSON.parse(s);
		
		var tempA = [];
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > a.length) {
			maxMembers = a.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"name": a[i].name, 
				"value": a[i].value
			};
			
			tempA.push(itemDef);
		}
		
		return tempA;
	*}

	/**
	 * Gets Raw Parameters As String Content Property
	 */	
	String getRawParameters() {*
		return this.DRawParameters;
	*}

	/**
	 * Sets Technical proprty for raw parameters Property
	 */	
	void setRawParameters( /* &nbsp; */  String rawParameters){*
		this.DRawParameters = rawParameters;
	*}