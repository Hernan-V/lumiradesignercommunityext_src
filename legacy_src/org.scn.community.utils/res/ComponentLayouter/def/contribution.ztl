
/**
 * Class for ComponentLayouter
 */
class org.scn.community.utils.ComponentLayouter extends org.scn.community.shared.Component {
	int getBrowserWidth(){* return this.browserWidth; *}
	int getBrowserHeight(){* return this.browserHeight; *}
	String getDevice(){* return this.device; *}
	String getOS(){* return this.os; *}
	String getCurrentProfile(){* return this.currentProfile; *}
	void setCurrentProfile(String profileName){*
		this.currentProfile = profileName;
	*}
	/**
	Issue exploratory Rhino command
	*/
	String bial(/* Debug */ String bial) {*
		return JSON.stringify(eval(bial));
	*}
	String checkProfiles(String measurements){*
		this.measurements = measurements;
		var width = this.browserWidth;
		var height = this.browserHeight;
		var os = this.os;
		var device = this.device;
		APPLICATION.log("Checking for a matching profile for [" + width + "x" + height + "] OS: " + os + " Device: " + device);
		var p = JSON.parse(this.profiles).profiles;
		for(var i=0;i<p.length;i++){
			var profile = p[i];
			APPLICATION.log("Checking profile " + profile.key);
			APPLICATION.log(profile);
			if((	// If width between, or min/max set to -1
					(width >= profile.browserMinWidth || profile.browserMinWidth == -1) && 
					(width <= profile.browserMaxWidth || profile.browserMaxWidth == -1)
				) && (// If height between, or min/max set to -1
					(height >= profile.browserMinHeight || profile.browserMinHeight == -1) &&
					(height <= profile.browserMaxHeight || profile.browserMaxHeight == -1)
			) && (   // Device/OS detection
					(profile.os == os || profile.os == "Any") &&
					(profile.device == device || profile.device == "Any")
			)
			){
				this.loadProfile(profile.key,measurements);
				return(profile.key);
			}
		}
		return "";
	*}
	String loadProfileExt(String profile, String measurements){*
		APPLICATION.log(profile);
		this.measurements = measurements;
		this.loadProfile(profile);
		return "done";
	*}
	String loadProfile(String profile){*
		APPLICATION.log("Load Profile called for key '" + profile + "'");
		APPLICATION.log(this.measurements);
		var m = JSON.parse(this.measurements);
		this.internal_assureGlobalAccess();
		var global = this.getGlobal();
		var p = JSON.parse(this.profiles).profiles;
		for(var i=0;i<p.length;i++){
			if(profile == p[i].key){
				APPLICATION.log("Applying layout: " + profile + "...");
				if(this.currentProfile != profile) this.currentProfile = profile;
				var layout = p[i].componentLayout.components;
				for(var j=0;j<layout.length;j++){
					var component = layout[j];
					if(global[component.key] && 
							component.key != "me"){
						// Find parent ID
						APPLICATION.log(global[component.key].getOwner().getItemType());
						var parent = global[component.key].getOwner().getParent().getId();
						var pm = {
							width : 0,
							height : 0
						}
						if(parent=="ROOT") pm = {
							width : this.browserWidth,
							height : this.browserHeight
						}
						// Locate parent measurement, if possible
						for(var p=0;p<m.length;p++){
							if(m[p].key == parent) pm = m[p];
						}
						APPLICATION.log("Moving " + component.key + JSON.stringify(component.position) + "...");
						if(global[component.key].setVisible){
							if(component.position.visible == "visible"){
								global[component.key].setVisible(true);	
							}
							if(component.position.visible == "hidden"){
								global[component.key].setVisible(false);	
							}
						}
						// Width
						if(component.position.width != "unchanged"){
							if(component.position.width != -1 && component.position.width != "auto"){
								if(component.position.width.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.width.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.width = pm.width * pct;
								}else{
									component.position.width = parseInt(component.position.width);	
								}
								global[component.key].setWidth(component.position.width);
							}else{
								global[component.key].setWidth("auto");
							}							
						}
						// Height
						if(component.position.height != "unchanged"){
							if(component.position.height != -1 && component.position.height != "auto"){
								if(component.position.height.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.height.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.height = pm.height * pct;
								}else{
									component.position.height = parseInt(component.position.height);	
								}
								global[component.key].setHeight(component.position.height);
							}else{
								global[component.key].setHeight("auto");
							}
						}
						// Top
						if(component.position.top != "unchanged"){
							if(component.position.top != -1 && component.position.top != "auto"){
								if(component.position.top.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.top.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.top = pm.height * pct;
								}else{
									component.position.top = parseInt(component.position.top);	
								}
								global[component.key].setTopMargin(component.position.top);	
							}else{
								global[component.key].setTopMargin("auto");
							}
						}
						// Bottom
						if(component.position.bottom != "unchanged"){
							if(component.position.bottom != -1  && component.position.bottom != "auto"){
								if(component.position.bottom.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.bottom.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.bottom = Math.floor(pm.height * pct);
								}else{
									component.position.bottom = parseInt(component.position.bottom);	
								}
								global[component.key].setBottomMargin(component.position.bottom);
							}else{
								global[component.key].setBottomMargin("auto");
							}
						}
						// Left
						if(component.position.left != "unchanged"){
							if(component.position.left != -1 && component.position.left != "auto"){
								if(component.position.left.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.left.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.left = Math.floor(pm.width * pct);
								}else{
									component.position.left = parseInt(component.position.left);	
								}
								global[component.key].setLeftMargin(component.position.left);
							}else{
								global[component.key].setLeftMargin("auto");
							}
						}
						// Right
						if(component.position.right != "unchanged"){
							if(component.position.right != -1 && component.position.right != "auto"){
								if(component.position.right.toString().indexOf("%")>-1){
									var pct = parseInt(component.position.right.toString().replace(/[^0-9]+/, ''))/100;							
									component.position.right = Math.floor(pm.width * pct);
								}else{
									component.position.right = parseInt(component.position.right);	
								}
								global[component.key].setRightMargin(component.position.right);
							}else{
								global[component.key].setRightMargin("auto");
							}
						}
						APPLICATION.log(JSON.stringify(component.position));
					}else{
						APPLICATION.log("Could not locate " + component.key + "...");
						// Component gone
					}
				}
			}
		}
	*}
	String getItems(){*
		this.internal_assureGlobalAccess();
		var global = this.getGlobal();
		var a = [];
		for (var key in global) {
			if(key == "CONTEXT_MENU" || key == "TEXT_POOL" || key.indexOf("GLOBAL_SCRIPT") == 0) {
				continue;
			}
			var component = global[key];
			try{
				if(component.getOwner && component.getTopMargin && key != "me") {
					var owner = component.getOwner();
					var type = "Unknown";
					if(owner.getItemType) {
						type = owner.getItemType();
					}
					if(type != "CONTEXT_MENU_COMPONENT" && type != "org_scn_community_utils_ComponentLayouter"){
						a.push({
							key : key,
							type : type
						});				
					} 
				}
			}catch(e){
				APPLICATION.log("Error trapped: " + e);
			}
		}
		return JSON.stringify(a);
	*}
	String examineCanvas() {*
		this.internal_assureGlobalAccess();
		var payload = {
			browserWidth : this.browserWidth,
			browserHeight : this.browserHeight,
			components : []
		};
		var global = this.getGlobal();
		for (var key in global) {
			if(key == "CONTEXT_MENU" || key == "TEXT_POOL" || key.indexOf("GLOBAL_SCRIPT") == 0) {
				continue;
			}
			var component = global[key];
			APPLICATION.log("Examining " + key);
			try{
				if(component.getOwner && component.getTopMargin && key != "me") {
					var visible = false;
					if(component.isVisible) visible = component.isVisible();
					// Eh, save for a rainy day.
					var snapshot = {
						visible : visible,
						top : component.getTopMargin(),
						bottom : component.getBottomMargin(),
						left : component.getLeftMargin(),
						right : component.getRightMargin(),
						width : component.getWidth(),
						height : component.getHeight()
					}
					var position = {
						visible : "unchanged",
						top : "unchanged",
						bottom : "unchanged",
						left : "unchanged",
						right : "unchanged",
						width : "unchanged",
						height : "unchanged"
					}
					payload.components.push({
						key : key,
						position : position,
						snapshot : snapshot
						//owner : global[key].getOwner(),
						//properties : global[key]
					});
				}
			}catch(e){
				APPLICATION.log("Error trapped: " + e);
			}
		}
		return JSON.stringify(payload);
	*}
}

